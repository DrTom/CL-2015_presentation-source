%section#intro

  %section#intro_title


    %h2 Fast and Resilient Integration Testing

    %h3 Continuous Lifecycle 2015

    %p Dr. Thomas Schank
    %p Max F. Albrecht

    %h4 (Version 0.6.0-draft)

    %aside.notes
      :markdown
        * robuste, schnelle, automatisierte tests

  %section#intro_medienarchiv{data: {background: 'medienarchiv.png'}}

  %section#intro_about

    %h1 Madek Team & Us


    %h3
      %a{href: 'https://www.zhdk.ch/'}
        Zurich University of the Arts

    .container{style: "width: 1000px; height: 400px; position: relative;"}
      %img{src: "cw.jpg", style: "width: 15%; position: absolute; top: 0; left: 0;"}
      %img{src: "sus.jpg", style: "width: 15%; position: absolute; bottom: 20px; left: 0;"}
      %img{src: "madek-team_2015.jpg", style: "height: 90%; position: absolute; top: 0; left: 230px;"}
      %img{src: "matus.jpg", style: "width: 15%; position: absolute; top: 0; right: 0;"}
      %img{src: "toni.jpg", style: "width: 15%; position: absolute; bottom: 20px; right: 0;"}


    %ul
      %li Thomas: Software-Architect, Developer, CI-Infrastructure
      %li Max: Frontend Software-Engineer, Meta-Data Concepts


    %aside.notes
      :markdown
        * kleines Team
        * begrenzte Ressourcen


  %section#intro_madek-tec

    :markdown
      ## [Madek](https://github.com/madek) - [Medienarchiv der Künste](http://medienarchiv.zhdk.ch/)

      ## Architecture & Technologies

      * Ruby on Rails, Clojure
      * progressive enhancement, React
      * 3-tier web-application
      * towards micro-services

  %section#intro_madek-architecture

    %img{src: 'madek-architecture.svg', style: "width: 100%"}

  %section#intro_madek-testing
    :markdown


      ## Madek Testing

      * specification by example

      → integration testing
      → components interaction



//#############################################################################
//### Problem #################################################################
//#############################################################################

%section#probem
  %section#problem_problem
    :markdown

      # 1. The Problem

  %section#problem_madek-2012
    :markdown

      ## Madek Project 2012

      many new features, many new tests

      * testing time 1 1/2 - 2 hours, increasing
      * more and more failing tests (false negatives)
      * 1/8 builds pass

  %section#problem_improve-tests
    :markdown
      # Try to Improve Tests

      * very time and resources consuming
      * new features and new tests made efforts futile

  %section#problem_manual-retries
    :markdown
      # Manual Retrying

      automated tests, local retries

      automatic → semi automatic testing

//#############################################################################
//### Problem #################################################################
//#############################################################################

%section#enlightenment

  %section#enlightenment_intro
    :markdown
      # 2. Enlightenment


  %section#enlightenment_probability

    :markdown

      ## Probability of false negative for a test-suite

      | | Expression | Example
      | probability false negative single test | $$p_f$$ | 3% |
      | probability positive success |  $$p_s = 1 - p_f$$ | 0.97 |
      | number of tests |  $$n$$ | 100 |
      | probability false negative suite|  $$ \mathbf{ P_f  = 1 - p_s^n }  $$ | $$ \approx 95 \%$$

      **→ only one out of 20 will pass as it should**



  %section#enlightenment_retrying
    :markdown
      # Why retrying works so well

      let $$k$$ number of independent retries per test

      $$ P_s(n) = (1 - p_f)^n $$
      $$ \Rightarrow $$
      $$ \mathbf{  P'_s(n,k) = \left(1 - p_f^k\right)^n } $$

      Expected successful outcome for $$n = 100$$ and $$p_f = 0.03$$

      | k | $$P'_s$$
      | 1 | 5%
      | 2 | 91%
      | 3 | 99.7%


  %section#enlightenment_false-positive
    :markdown
      # Managing false positives

      Retrying randomized tests can hide problems!

      Solution:

      * reproducibility by initializing the pseudo random generator
      * statistics

  %section#enlightenment_conclusion
    :markdown

      # Conclusion

      * false negatives happen in complex scenarios
      * the test-suite is very likely to result with a false negatives when there are a lot of tests
      * we can effectively compensate by retrying single tests with only very low number of maximal retries

      **→ retrying is not an anti-pattern but a necessity**





//#############################################################################
//### Implementation ##########################################################
//#############################################################################


%section#implementation
  %section#implementation-intro

    %h1 Implementation

  %section#implementation_jenkins
    :markdown
      # Jenkins

      * fall 2012
      * build creates other builds via the Jenkins API
      * last build aggregates

      → it worked

      * solves false negative problem (largely)
      * testing time: 15 - 25 minutes

      # TODO: add screenshot

  %section#implementation_jenkins-problems
    :markdown
      # Iusses

      * "REST-like style API" → not much like REST
      * hunt for documentation

      * too frequent SCM pushes interfere

      → Jenkins just isn't made for this

  %section#implementation_homegrown-solution
    :markdown
      # Homegrown Solution

      private project started in spring  2013

      * inherent support for retries and parallelization
      * expert system
      * simple as possible
      * Git and git only, all the way down

      ready to use in fall 2013, never looked back


  %section#implementation_cider-ci
    :markdown
      # [Cider-CI](http://cider-ci.info) Today

      * false negatives solved
      * testing time Madek v2:  2 Hours → 3 ‥ 5 Minutes
      * support complex scenarios:
        * testing microservice architectures
        * perform deployment


//#############################################################################
//### Concepts and Examples in Context ########################################
//#############################################################################

%section#concepts

  %section#concepts
    %h1 Concepts and Examples in Context

    (top down)

  //#############################################################################

  %section#concepts_jobs
    :markdown
      # Jobs

        * build
        * perform static code checks
        * run tests
        * deploy


    .image
      %a{href: 'job-dependencies.svg'}
        %img{src: 'job-dependencies.svg', style: "height: 300px; width: 300px;"}

    %p jobs can depend on each other


    %aside.notes
      :markdown
        * _Continuous Integration Server_  vs. stupid script runner



  %section#practices_source
    :markdown
      # Practice: The Source is the Truth


  %section#concepts_scm
    :markdown
      # CI and Source Code Management Systems

      job is bound to _tree-id_ (hash of the state of your project)

      _tree-id_ is bound to commits

      * reproducibility
      * binary search for code-breaks



  //#############################################################################

  %section#concepts_tasks-trials_1
    %h1 Tasks & Trials 1

    .image
      %a{href: 'job-tasks-script.svg'}
        %img{src: 'job-tasks-script.svg', style: "width: 500px;"}

    :markdown

      jobs: container and state aggregate of tasks


  %section#concepts_tasks-trials_2
    %h1 Tasks & Trials 2

    .image
      %a{href: 'trial-retry.svg'}
        %img{src: 'trial-retry.svg', style: "width: 500px;"}

    :markdown

      task: blueprint, container and state aggregate of trials

      ## parallelization and resilience


  %section#practices_shadowing-failures
    :markdown
      # Practice: Reproducible Randomization

      Automatic retries could shadow real problems.

      * Use statistics.

      * Best practice: seed pseudo random generator.


  %section#practices_dont-optimize-test
    :markdown
      # Practice: Don't "Optimize" Tests
      (for speed anyways)

    %aside.notes
      :markdown
        * last level:
            * production mode
            * reverse proxy as in production
        * counter example: Rails transaction in SQL db for clean, because it is faster


  //#############################################################################

  %section#concepts_scripts-intro
    :markdown
      # Scripts

      actual unit of execution

      traditional CI: one "build" ⇔ one script

      more modern: one main script + before and after hooks

      * easy vs simple
      * doesn't cut it for integration testing

  %section#concepts_scripts-cider
    :markdown
      # Scripts with Dependencies
    .image
      %a{href: 'scripts-dependencies.png'}
        %img{src: 'scripts-dependencies.png', style: "width: 800px;"}


  %section#concepts_scripts-fail
    :markdown
      # Scripts - Fail and Clean-up

    .image
      %a{href: 'scripts-dependencies-fail.png'}
        %img{src: 'scripts-dependencies-fail.png', style: "width: 800px;"}


  %section#concepts_conclusion
    :markdown
      # Conclusion

      real continuous integration: job dependencies

      resilient integration testing: tasks, trials and retries

      parallelization: independent tasks

      integration testing & servcies: scripts with dependencies



//#############################################################################
//### demos ###################################################################
//#############################################################################

%section#demos

  %section#demos_demos

    %h1 Demos

  %section#demos_scripts_int-tests
    :markdown
      # Scripts with Dependencies
    .image
      %a{href: 'scripts-dependencies.png'}
        %img{src: 'scripts-dependencies.png', style: "width: 800px;"}

  %section#demos_scripts_in-action

    %a{href: 'scripts.mp4'}
      %video
        %source{'data-src': 'scripts.mp4', type: 'video/mp4',
          style: "width: 100%; height: 100%;"}

  %section#scripts_gantt-chart
    :markdown
      # Scripts Gantt-Chart
    .image
      %a{href: 'scripts-gantt-chart.png'}
        %img{src: 'scripts-gantt-chart.png', style: "width: 800px;"}


  %section#demos_madek-jobs
    %h1  Jobs and Dependencies for the Madek Project
    .image
      %a{href: 'madek_job-dependencies.svg'}
        %img{src: 'madek_job-dependencies.svg', style: "height: 500px; width: 500px;"}

  %section#demos_madek-jobs-video
    %a{href: 'jobs.mp4'}
      %video
        %source{'data-src': 'jobs.mp4', type: 'video/mp4',
          style: "width: 100%; height: 100%;"}



//#############################################################################
//### conclusion ##############################################################
//#############################################################################

%section#end

  %section#final-conclusion
    :markdown

      # Conclusion

      Consider to build your own test runner.

      or

      try Cider-CI, open source, installs with one command:

      [Cider-CI Quick Start Guide](http://docs.cider-ci.info/introduction/quick-start/)

      `http://docs.cider-ci.info/introduction/quick-start/`



