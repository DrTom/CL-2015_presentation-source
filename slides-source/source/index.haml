%section#intro

  %section#intro_title


    %h2 Fast and Resilient Integration Testing

    %h3 Continuous Lifecycle 2015

    %div{style: 'margin-top: 1em'}
    %p
      %a{href: 'http://github.com/drtom'}
        %i.fa.fa-github-square
      %a{href: 'https://twitter.com/DrTom21'}
        %i.fa.fa-twitter-square
      %a{href: 'http://drtom.ch/'}
        %i.fa.fa-home
      &nbsp;
      Dr. Thomas Schank

    %p
      %a{href: 'http://github.com/eins78'}
        %i.fa.fa-github-square
      %a{href: 'https://twitter.com/eins78'}
        %i.fa.fa-twitter-square
      &nbsp;
      Max F. Albrecht

    %div{style: 'margin-top: 2em'}
      %a{href: 'http://drtom.ch/talks/2015/CL'}
        %p{style: 'margin: 0px'}
          %code http://drtom.ch/talks/2015/CL
        %img{src: 'presentation-url.svg', style: 'width: 3em;'}


    %p{style: 'margin-top: 1em; font-size: 50%'} Version 1.1.0

    %p{style: 'margin-top: 1em; font-size: 50%'}
      ="This work "
      is licensed under a
      = succeed "." do
        %a{:href => "http://creativecommons.org/licenses/by-nd/4.0/", :rel => "license"} Creative Commons Attribution-NoDerivatives 4.0 International License

    %aside.notes
      :markdown
        * robuste, schnelle, automatisierte tests

  %section#intro_medienarchiv{data: {background: 'medienarchiv.png'}}

  %section#intro_about

    %h1 Madek Team & Us


    %h3
      %a{href: 'https://www.zhdk.ch/'}
        %i.fa.fa-institution
        Zurich University of the Arts

    .container{style: "width: 1000px; height: 400px; position: relative;"}
      %img{src: "cw.jpg", style: "width: 15%; position: absolute; top: 0; left: 0;"}
      %img{src: "sus.jpg", style: "width: 15%; position: absolute; bottom: 20px; left: 0;"}
      %img{src: "madek-team_2015.jpg", style: "height: 90%; position: absolute; top: 0; left: 230px;"}
      %img{src: "matus.jpg", style: "width: 15%; position: absolute; top: 0; right: 0;"}
      %img{src: "toni.jpg", style: "width: 15%; position: absolute; bottom: 20px; right: 0;"}


    %ul{style: "font-size: 80%;"}
      %li Thomas: Software-Architect, Developer, CI-Infrastructure
      %li Max: Frontend Software-Engineer, Meta-Data Concepts


    %aside.notes
      :markdown
        * kleines Team
        * begrenzte Ressourcen


  %section#intro_madek-tec

    %h2
      %a{href: 'https://github.com/madek'}
        Madek
        %i.fa.fa-github
      \-
      %a{href: 'http://medienarchiv.zhdk.ch/'}
        Medienarchiv der Künste
    :markdown
      ## Architecture & Technologies

      * Ruby on Rails, Clojure
      * React with progressive enhancement
      * 3-tier web-application
      * towards micro-services
      * deployment via Ansible to private cloud

  %section#intro_madek-architecture

    %img{src: 'madek-architecture.svg', style: "width: 100%"}

  %section#intro_madek-testing
    :markdown


      ## Madek Testing

      ["**specification by example**"](http://specificationbyexample.com/)


      → integration testing

      → components interaction



//#############################################################################
//### Problem #################################################################
//#############################################################################

%section#probem
  %section#problem_problem
    %h1 1. The Problem

    %p{style: "font-size: 7em"}
      %i.fa.fa-question-circle

  %section#problem_madek-2012
    :markdown

      ## Madek Project 2012

      many new features, many new tests

      * testing time 1 1/2 - 2 hours, increasing
      * more and more failing tests: **false negatives**
      * 1/8 builds pass

  %section#problem_improve-tests
    .row
      .col{style: "float: left; width: 40%"}
        %img{src: 'scream.jpg', style: "max-width: 100%;"}
      .col{style: "float: left; width: 60%;"}
        :markdown
          ## Try to Improve Tests
          * very time and resources consuming
          * improvement for some time
          * new features and new tests made efforts futile

  %section#problem_manual-retries
    :markdown
      # Manual Retrying

      automated tests, local retries

      automatic → semi automatic testing

    %aside.notes
      :markdown
        * bekanntes problem?
        * retry Test-Frameworks, hat nicht geholfen
        * no Continuous Integration / Delivery



//#############################################################################
//### Comprehension ###########################################################
//#############################################################################

%section#comprehension

  %section#comprehension_intro
    %h1 2. Comprehension

    %img{src: 'GirolamoCardano.jpg', style: "max-width: 100%; border: 0px solid gray;"}

    %aside.notes
      :markdown
        * Girolamo Cardano
        * Mathematiker, Artzt und Glücksspieler!
        * Gerücht Mathematische Ergebnisse Zurückgehalten um
          sie gewinnträchtig beim Glücksspiel einzusetzen


  %section#comprehension_probability

    :markdown

      ## Probability of a False Negative for a whole Test-Suite

      | | Expression | Example
      | probability false negative single test | $$p_f$$ | 3% |
      | probability "success" |  $$p_s = 1 - p_f$$ | 0.97 |
      | number of tests |  $$n$$ | 100 |
      | probability "success" whole suite|  $$ \mathbf{ P_s  = p_s^n = \left( 1 - p_f \right)^n}  $$ | $$ \approx 5 \%$$

      **→ only one out of 20 will pass as it should**

    %p{style: "text-size: 80%"}
      "succes" = true positive


  %section#comprehension_retrying
    :markdown
      # Why retrying works so well

      let $$k$$ number of independent retries per test

      $$ P_s(n) = (1 - p_f)^n $$
      $$ \Rightarrow $$
      $$ \mathbf{  P'_s(n,k) = \left(1 - p_f^k\right)^n } $$

      Expected successful outcome for $$n = 100$$ and $$p_f = 0.03$$

      | k | $$P'_s$$
      | 1 | 5%
      | 2 | 91%
      | 3 | 99.7%


  %section#comprehension_conclusion
    :markdown

      # 2. Comprehension - Conclusion

      * more tests → **exponential** increase of likeliness for false negatives

      * compensate by **retrying** single tests just a **few times**

      **→ retrying is not an anti-pattern**

      **→ it can be a necessity**

    %aside.notes
      :markdown
        * Integration Tests 0 >> p_f !!!




//#############################################################################
//### Implementation ##########################################################
//#############################################################################


%section#implementation
  %section#implementation-intro

    %h1 3. Implementation

    %p{style: "font-size: 7em"}
      %i.fa.fa-cogs


  %section#implementation_jenkins

    .row
      .col{style: "float: left; width: 40%;"}
        %img{src: 'jenkins-aggregator.png', style: "max-width: 100%; border: 0px solid gray;"}
      .col{style: "float: left; width: 60%"}
        :markdown
          ## Jenkins

          * fall 2012
          * build creates other builds via the Jenkins API
          * last build aggregates
          * solved false negative problem (partly)
          * testing time: 15 - 25 minutes

          → it worked

  %section#implementation_jenkins-problems

    .row
      .col{style: "float: left; width: 40%;"}
        %img{src: 'screwdriver.jpg', style: "max-width: 100%; "}
      .col{style: "float: left; width: 60%"}
        :markdown

          * frequent code pushes interfere

          * "REST-like style API" → not much like REST

          * considerable effort and maintenance

          **→  Jenkins and "CI-X" just aren't made for this**

  %section#implementation_homegrown-solution
    :markdown
      # [Cider-CI](http://cider-ci.info)

      homegrown solution, started in spring 2013

      * inherent support for **retries** and **parallelization**
      * test **reproducibility**
      * tight **integration** with **source code**
      * **manage services** while testing
      * support everything from **testing** to **deployment**

       ready to use in fall 2013, **never looked back**

    %aside.notes
      :markdown
        * eigenes System, Open Source, Stolz,
        * Konzepte


//#############################################################################
//### Concepts in Context #####################################################
//#############################################################################

%section#concepts

  %section#concepts-intro
    %h1 4. Concepts in Context

    %p{style: "font-size: 7em"}
      %i.fa.fa-lightbulb-o




  //### Jobs ####################################################################

  %section#concepts_jobs

    %h1 Jobs

    .row
      .col{style: "float: left; width: 60%"}
        :markdown


          ### Examples

          * run test-suite
          * perform static code checks
          * build
          * deploy

          jobs can be **triggered** and can **depend on each other**

      .col{style: "float: left; width: 40%;"}
        %img{src: 'job-dependencies.svg', style: "max-width: 100%; "}


    %aside.notes
      :markdown
        * "build" aufgeteilt in mehrere Entitäten
        * _Continuous Integration Server_  vs. script runner



  %section#concepts_project-configuration
    :markdown
      # Project Configuration

       `cider-ci.yml` file in the project

      ~~~
      jobs:
        deploy_test:
          name: Deploy to test

          depends-on:
          - type: job
            job: integration-tests
            states: [passed]

          run-on:
          - type: branch
            include-match: ^master$

          # specify tasks etc
      ~~~


      **The source is the truth.**

      configuration: reproducible, reviews, audits ???

    %aside.notes
      :markdown
        * siehe Vortrag Dr. Andreas Krüger
        * und Dave Farley


  %section#concepts_jobs-and-scm
    :markdown
      # Cider-CI and the Source Code

      Cider-CI "knows" about commits, branches, submodules,...

    %img{src: 'ci-entities_jobs.svg', style: "width: 100%; "}

    :markdown

      `tree-id`: fingerprint of your source code

      * **reproducibility**
      * jobs can be **run at any time** (later)
      * **binary search** for "bad" commits
      * commit amends, squashing: **existing job remains valid**



  //#############################################################################

  %section#concepts_tasks-trials_1
    %h1 Jobs & Tasks

    .image
      %a{href: 'job-tasks.svg'}
        %img{src: 'job-tasks.svg', style: "width: 500px;"}

    :markdown

      job: container and state aggregate for tasks

      **→ parallelization**

  %section#concepts_tasks-trials
    %h1 Tasks & Trials

    .image
      %a{href: 'trial-retry.svg'}
        %img{src: 'trial-retry.svg', style: "width: 700px;"}

    :markdown

      * **blueprint**
      * container and state aggregate for trials

      **→ resilience**

    %aside.notes
      :markdown
        * Robustheit => Parallelisierung, aber nicht umgekehrt


  %section#concepts_trials-scripts
    .row
      .col{style: "float: left; width: 35%;"}
        %img{src: 'scripts.svg', style: "max-width: 100%;"}
      .col{style: "float: left; width: 65%; text-align: left;"}
        :markdown
          # Trial & Scripts
          * actual unit of execution
          * executed in the **same context**
          * **depend** on each other


  %section#concepts_scripts

    :markdown
      ## Script Dependencies

    .image
      %img{src: 'script-dependencies-simple.png', style: "width: 70%;"}

    :markdown

      * traditional CI: one "build" ⇔ one script
      * more modern: one main script + before and after "hooks"
      * Cider-CI: **scripts with dependencies**



//#############################################################################
//### demos ###################################################################
//#############################################################################

%section#demos

  %section#demos_demos

    %h1 4. Demos

    %p{style: "font-size: 7em"}
      %i.fa.fa-file-video-o


  %section#demos_madek-jobs
    .image
      %a{href: 'madek_job-dependencies.svg'}
        %img{src: 'madek_job-dependencies.svg',
          style: "max-height: 700px;"}

  %section#demos_madek-jobs-video
    %a{href: 'jobs-demo.mp4'}
      %img{src: 'jobs-demo.png'}

  %section#demos_madek-scripts
    %a{href: 'retry_and_scripts.mp4'}
      %img{src: 'retry_and_scripts.png'}


//#############################################################################
//### Tangential ##############################################################
//#############################################################################

%section#addendum

  %section#addendum_intro

    %h1 5. Addendum

    %p{style: "font-size: 7em"}
      %i.fa.fa-ellipsis-h



  %section#addendum_false-positive
    :markdown
      # Managing false positives


      Retrying randomized tests can hide problems!

      "Generative Testing" e.g.

      ##Solution:

      * reproducibility by initializing the
          pseudo random generator (we use the `tree_id` e.g.)
      * statistics

  %section#addendum_git
    :markdown
      # Git SCM and Git only
      * don't compromise
      * can't support everything with reasonable effort
    %aside.notes
      :markdown
        * no go for comercial systems

  %section#addendum_project-security
    :markdown
      # Security & Trust

      * Cider-CI server itself **never runs any code** from projects
      * **"blessed" executors** only accept trials for a particular project (repository)

    %aside.notes
      :markdown
        siehe Vortrag Dr. Andreas Krüger

  %section#addendum_matching
    :markdown
      # Matching Trials to Executors

      * task specifies **required traits**, e.g: [`bash`, `ruby-2.2` ]

      * executors advertise **available traites**, e.g. [`bash`, `maven`, `postgresql`, `ruby-2.1`, `ruby-2.2`,  ...]

      Cider-CI will determine a suitable executor.


    %aside.notes
      :markdown
        siehe Vortrag Dr. Andreas Krüger


  %section#addendum_deployment
    :markdown
      # Deployment

      * Ansible
      * Cider-CI deploy project, SCM managed, reproducible

    %aside.notes
      :markdown
        siehe Vortrag Dr. Andreas Krüger

  %section#addendum_expert
    :markdown
      # Cider-CI is an Expert System

      it is about **making the hard possible**, and not
      not about making the simple easy*

      * for professionals
      * no compromises
      * steep learning curve
      * high rewards

      → swiss army knife for devops

    %p{style: "font-size: 70%; margin-top: 2em"}
      *see "Simple Made Easy" by Rich Hickey




//#############################################################################
//### conclusion ##############################################################
//#############################################################################

%section#end

  %section#final-conclusion
    :markdown

      # Conclusion

      * A false negative outcome becomes likely with an increasing number of tests.
      * The problem must be solved by retrying single tests.
      * Consider to build your own pipeline.
      * Try Cider-CI, open source, installs with two commands:

    %a{href: 'http://docs.cider-ci.info/introduction/quick-start/'}
      %br
        %code{style: "font-size: 75%"} http://docs.cider-ci.info/introduction/quick-start/
      %img{src: 'cider-ci_intro_qr.svg', style: 'width: 3em;'}


    %blockquote{style: "margin-top: 1em; font-size: 125%"}
      %b
        Thank You!




